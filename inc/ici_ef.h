/*------------------------------------------------------------------------------

*------------------------------------------------------------------------------
*
* Processor       : 
* File Name       : ici_ef.h
* Description     : Interface for the ici function.c
                    BS

*  Version        : 1.00
*
*       +----- (NEW | MODify | ADD | DELete)
*       |
*  No   |   When       Who                What
*-----+---+----------+------------------+--------------------------------------
* 000  NEW  11/11/13   Markovsky A       Creation
*----------------------------------------------------------------------------*/

#ifndef ici_e_fn_h
#define ici_e_fn_h

//~#include "rec.h"

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~       Перечень констант которые возвращают функции                      ~~~~~
//~~~       обработки запросов дискретного регистратора                       ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//``````````````````````````````````````````````````````````````````````````````````
#define START_EXEC        1 
#define STATE_EXEC        2
#define SUCCESS_EXEC      3
#define ERROR_EXEC        4
//``````````````````````````````````````````````````````````````````````````````````
//~~~   возврат START_EXEC    - Запрос успешно принят 
//~~~   возврат STATE_EXEC    - Идет обработка предыдущего запроса
//~~~   возврат SUCCESS_EXEC  - Запрос успешно обработан
//~~~   возврат ERROR_EXEC    - Ошибка при приеме запроса
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~       Перечень констант  идентификаторов адресов                        ~~~~~
//~~~        запросов дискретного регистратора                                ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

#define ID_REQ1      1 
#define ID_REQ2      2
#define ID_REQ3      3
#define ID_REQ4      4
//``````````````````````````````````````````````````````````````````````````````````
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~       Перечень констант  идентификаторов активаторов телемеханики        ~~~~~
//~~~                                                                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

#define ID_KEY           1 
#define ID_RS485         (ID_KEY       + 1) //2-
#define ID_RS232         (ID_RS485     + 1) //3-
#define ID_USB           (ID_RS232     + 1) //4-
#define ID_ZIG_BEE       (ID_USB       + 1) //5-
#define ID_ETHERNET      (ID_ZIG_BEE   + 1) //6-
//``````````````````````````````````````````````````````````````````````````````````
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//``````````````````````````````````````````````````````````````````````````````````
//                   ~~~    HEADER  ArTenPerData REQUEST STATE STRUCTS  ~~~
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
typedef struct ArTenPerStateDsc_TagIn
{
long sizeAr;      //Размер считанного массива
long *pTenPerData;//Указатель на начало данных

}ArTenPerStateDsc;
//~~~   
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---
extern char ReqArTenPerData(long lActivation, void* pArDataDsc);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция запроса/получения  массива 10 периодов мгновенных            ~~~~~
//~~~     значений                                                             ~~~~~
//~~~                                                                          ~~~~~
//~~~    Возвращаемое значение                                                 ~~~~~
//~~~    1 - команда начала выполняться                                        ~~~~~
//~~~    2 - системы защит и автоматики находится в состоянии выполнении запроса ~~~
//~~~    3 - команда выполнена успешно                                         ~~~~~
//~~~    4 - возникла  ошибка при старте, передаче,                            ~~~~~
//~~~     или данные недостоверны                                              ~~~~~
 
//``````````````````````````````````````````````````````````````````````````````````
//~~~   pArData  - По данному адресу в случае успеха будет помещен указатель   ~~~~~
//~~~   на структуру ArTenPerStateDsc описыввающую массив                      ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   lActivation == 0 - вернуть состояние массива                            ~~~~~
//~~~   lActivation == 1 - активировать передачу массива                        ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  Для указателя **pArData                                                ~~~~~
//~~~ !!ПАМЯТЬ НЕОБХОДИМО РАЗМЕЩАТЬ ПО ВЫРОВНЕННЫМ НА ГРАНИЦУ 32 БИТА СЛОВАМ !!! ~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  ArTenPerStateDsc locArTenPerState;                                      ~~~~~
//~~~  int res;                                                                ~~~~~
//~~~  res =  ReqArTenPerData(1,&locArTenPerState);                            ~~~~~
//~~~   активировать передачу массива                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   res =  ReqArTenPerData(0,&locArTenPerState);                           ~~~~~
//~~~   опрос состояния обработки данных                                       ~~~~~
//~~~   STATE_EXEC  -- Wait                                                    ~~~~~
//~~~   SUCCESS_EXEC -- Ok                                                     ~~~~~
//~~~   возврат ERROR_EXEC - Ошибка при приеме данных                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//``````````````````````````````````````````````````````````````````````````````````
//                 ~~~    HEADER  Ar_total_measurement REQUEST STATE STRUCTS  ~~~
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
typedef struct TotMeasStateDsc_TagIn
{
long size_total_measurement;      //Размер считанного массива
void *p_total_measurement;//Указатель на начало данных

}TotMeasStateDsc;
//~~~   
//``````````````````````````````````````````````````````````````````````````````````
//~~~  p_total_measurement необходимо конвертировать к типу __TOTAL_MEASUREMENT~~~~~
//~~~  __TOTAL_MEASUREMENT описывается в файлах                                ~~~~~
//~~~  inc\type_definition_BS.h                                                ~~~~~
//~~~  inc\const_BS_BL.h                                                       ~~~~~
//~~~  inc\type_definition_BL.h                                                ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---
extern char ReqTotMeasData(long lActivation, void* pTotMeasStateDsc);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция запроса/получения  структуры измерений __TOTAL_MEASUREMENT   ~~~~~
//~~~     значений                                                             ~~~~~
//~~~                                                                          ~~~~~
//~~~    Возвращаемое значение                                                 ~~~~~
//~~~    1 - команда начала выполняться                                        ~~~~~
//~~~    2 - системы обмена находится в состоянии выполнении запроса           ~~~
//~~~    3 - команда выполнена успешно                                         ~~~~~
//~~~    4 - возникла  ошибка при старте, передаче,                            ~~~~~
//~~~     или данные недостоверны                                              ~~~~~
 
//``````````````````````````````````````````````````````````````````````````````````
//~~~   pTotMeasStateDsc - По данному адресу в случае успеха будет помещен указатель
//~~~   на структуру TotMeasStateDsc описыввающую __TOTAL_MEASUREMENT          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   lActivation == 0 - вернуть состояние __TOTAL_MEASUREMENT                ~~~~~
//~~~   lActivation == 1 - активировать передачу __TOTAL_MEASUREMENT            ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  Для указателя *pTotMeasDsc                                               ~~~~~
//~~~ !!ПАМЯТЬ НЕОБХОДИМО РАЗМЕЩАТЬ ПО ВЫРОВНЕННЫМ НА ГРАНИЦУ 32 БИТА СЛОВАМ !!! ~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  TotMeasStateDsc locTotMeasState;                                      ~~~~~
//~~~  int res;                                                                ~~~~~
//~~~  res =  ReqTotMeasData(1,&locTotMeasState);                            ~~~~~
//~~~   активировать передачу массива                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   res =  ReqTotMeasData(0,&locTotMeasState);                           ~~~~~
//~~~   опрос состояния обработки данных                                       ~~~~~
//~~~   STATE_EXEC  -- Wait                                                    ~~~~~
//~~~   SUCCESS_EXEC -- Ok                                                     ~~~~~
//~~~   возврат ERROR_EXEC - Ошибка при приеме данных                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//``````````````````````````````````````````````````````````````````````````````````
//                 ~~~    HEADER  Ar_current_settings  REQUEST STATE STRUCTS  ~~~
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
typedef struct SettigsStateDsc_TagIn
{
long size_current_settings ;      //Размер считанного массива
void *p_current_settings ;//Указатель на начало данных

}SettingsStateDsc;
//~~~   
//``````````````````````````````````````````````````````````````````````````````````
//~~~  p_current_settings будет  конвертироваться к типу __SETTINGS            ~~~~~
//~~~  __SETTINGS описывается в файлах                                         ~~~~~
//~~~  inc\type_definition_BS.h                                                ~~~~~
//~~~  inc\const_BS_BL.h                                                       ~~~~~
//~~~  inc\type_definition_BL.h                                                ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
extern SettingsStateDsc testSettigsState;
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---
extern char ReqGetSettingsBM (long lActivation, void* pSettigsStateDsc);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция получения  структуры __SETTINGS c  BM(блок матем)           ~~~~~
//~~~     значений                                                             ~~~~~
//~~~     похожая функция может использрваться и для EEPROM                    ~~~~~
//~~~    Возвращаемое значение                                                 ~~~~~
//~~~    1 - команда начала выполняться                                        ~~~~~
//~~~    2 - системы обмена находится в состоянии выполнении запроса           ~~~
//~~~    3 - команда выполнена успешно                                         ~~~~~
//~~~    4 - возникла  ошибка при старте, передаче,                            ~~~~~
//~~~     или данные недостоверны                                              ~~~~~
 
//``````````````````````````````````````````````````````````````````````````````````
//~~~   pSettigsStateDsc - По данному адресу в случае успеха будет помещен указатель
//~~~   на структуру SettigsStateDsc описыввающую __SETTINGS          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   lActivation == 0 - вернуть состояние __SETTINGS                       ~~~~~
//~~~   lActivation == 1 - активировать запрос __SETTINGS                     ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  Для указателя *pSettigsStateDsc                                         ~~~~~
//~~~ !!ПАМЯТЬ НЕОБХОДИМО РАЗМЕЩАТЬ ПО ВЫРОВНЕННЫМ НА ГРАНИЦУ 32 БИТА СЛОВАМ !!! ~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  SettigsStateDsc locSettigsState;                                       ~~~~~
//~~~  int res;                                                                ~~~~~
//~~~  res =  ReqGetSettingsBM(1,&locSettigsState);                            ~~~~~
//~~~   активировать передачу массива                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   res =  ReqGetSettingsBM(0,&locSettigsState);                           ~~~~~
//~~~   опрос состояния обработки данных                                       ~~~~~
//~~~   STATE_EXEC  -- Wait                                                    ~~~~~
//~~~   SUCCESS_EXEC -- Ok                                                     ~~~~~
//~~~   возврат ERROR_EXEC - Ошибка при приеме данных                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---
extern char ReqSendSettingsBM (long lActivation, void* pSettigsStateDsc);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция отправки   структуры __SETTINGS на BM(блок матем)           ~~~~~
//~~~     значений                                                             ~~~~~
//~~~                                                                          ~~~~~
//~~~    Возвращаемое значение                                                 ~~~~~
//~~~    1 - команда начала выполняться                                        ~~~~~
//~~~    2 - системы обмена находится в состоянии выполнении запроса           ~~~
//~~~    3 - команда выполнена успешно                                         ~~~~~
//~~~    4 - возникла  ошибка при старте, передаче,                            ~~~~~
//~~~     или данные недостоверны                                              ~~~~~
 
//``````````````````````````````````````````````````````````````````````````````````
//~~~   pSettigsStateDsc - По данному адресу в случае успеха будет помещен указатель
//~~~   на структуру SettigsStateDsc описыввающую __SETTINGS          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   lActivation == 0 - вернуть состояние __SETTINGS                ~~~~~
//~~~   lActivation == 1 - активировать передачу __SETTINGS            ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  Для указателя *pSettigsStateDsc                                         ~~~~~
//~~~ !!ПАМЯТЬ НЕОБХОДИМО РАЗМЕЩАТЬ ПО ВЫРОВНЕННЫМ НА ГРАНИЦУ 32 БИТА СЛОВАМ !!! ~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  SettigsStateDsc locSettigsState;                                      ~~~~~
//~~~  int res;                                                                ~~~~~
//~~~  res =  ReqSendSettingsBM(1,&locSettigsState);                           ~~~~~
//~~~   активировать передачу массива                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   res =  ReqSendSettingsBM(0,&locSettigsState);                          ~~~~~
//~~~   опрос состояния обработки данных                                       ~~~~~
//~~~   STATE_EXEC  -- Wait                                                    ~~~~~
//~~~   SUCCESS_EXEC -- Ok                                                     ~~~~~
//~~~   возврат ERROR_EXEC - Ошибка при приеме данных                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


extern unsigned int ustuvannja_BS[];//NUMBER_CANALS];//ustuvannja_meas[NUMBER_CANALS], 
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//``````````````````````````````````````````````````````````````````````````````````
//                 ~~~    HEADER  Ar_ustuvannja  REQUEST STATE STRUCTS  ~~~
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
typedef struct YustStateDsc_TagIn
{
long size_ustuvannja_BS ;      //Размер считанного массива ustuvannja_BS[NUMBER_CANALS]
void *p_ustuvannja_BS ;//Указатель на начало данных

}YustStateDsc;
//~~~   
//``````````````````````````````````````````````````````````````````````````````````
//~~~  p_ustuvannja_BS будет  конвертироваться к типу ustuvannja_BS            ~~~~~
//~~~  Массив ustuvannja_BS должна, где-то объявить система                    ~~~~~
//~~~  параметрирования после получения ответа 1 - команда начала выполняться  ~~~~~
//~~~  содержимое заносится во внутренний буфер системы межпроцессорного      ~~~~~
//~~~  обмена и возвращается результат для контроля с BM                      ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---
extern char ReqChangeYustBM (long lActivation, void* pYustStateDsc);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция отправки/получения  массива ustuvannja_BS[NUMBER_CANALS]     ~~~~~
//~~~   на BM(блок матем)                                                                        ~~~~~
//~~~                                                                          ~~~~~
//~~~    Возвращаемое значение                                                 ~~~~~
//~~~    1 - команда начала выполняться                                        ~~~~~
//~~~    2 - системы обмена находится в состоянии выполнении запроса           ~~~
//~~~    3 - команда выполнена успешно                                         ~~~~~
//~~~    4 - возникла  ошибка при старте, передаче,                            ~~~~~
//~~~     или данные недостоверны                                              ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   pYustStateDsc - По данному адресу в случае успеха будет помещен указатель
//~~~   на структуру YustStateDsc описыввающую ustuvannja_BS[NUMBER_CANALS]          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   lActivation == 0 - вернуть состояние ustuvannja_BS[NUMBER_CANALS]                ~~~~~
//~~~   lActivation == 1 - активировать передачу ustuvannja_BS[NUMBER_CANALS]            ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  Для указателя *pYustStateDsc                                         ~~~~~
//~~~ !!ПАМЯТЬ НЕОБХОДИМО РАЗМЕЩАТЬ ПО ВЫРОВНЕННЫМ НА ГРАНИЦУ 32 БИТА СЛОВАМ !!! ~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  YustStateDsc locYustState;                                              ~~~~~
//~~~  int res;                                                                ~~~~~
//~~~  res =  ReqChangeSettings(1,&locYustState);                              ~~~~~
//~~~   активировать передачу массива                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//`````````````````````````````````````````````````````````````````````````````````` 
//~~~  res =  ReqChangeSettings(1,&locYustState);                              ~~~~~
//~~~   опрос состояния обработки данных                                       ~~~~~
//~~~   STATE_EXEC  -- Wait                                                    ~~~~~
//~~~   SUCCESS_EXEC -- Ok                                                     ~~~~~
//~~~   возврат ERROR_EXEC - Ошибка при приеме данных                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---
extern char  ReqGetYustBM(long lActivation, void* pYustStateDsc);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция запроса на получение  юстировочных чисел  с BM            ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~    Возвращаемое значение                                                 ~~~~~
//~~~    1 - команда начала выполняться                                        ~~~~~
//~~~    2 - системы защит и автоматики находится в состоянии выполнении запроса ~~~
//~~~    3 - команда выполнена успешно                                         ~~~~~
//~~~    4 - возникла  ошибка при старте, передаче,                            ~~~~~
//~~~     или данные недостоверны                                              ~~~~~
 
//``````````````````````````````````````````````````````````````````````````````````
//~~~   pYustStateDsc - По данному адресу необходимо помещать указатель
//~~~   на структуру YustStateDsc описывающую ustuvannja_BS[NUMBER_CANALS]     ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   lActivation == 0 - вернуть состояние выполнения запроса массива        ~~~~~
//~~~   lActivation == 1 - активировать передачу ustuvannja_BS[NUMBER_CANALS]  ~~~~~
//~~~   
//``````````````````````````````````````````````````````````````````````````````````
//~~~  p_ustuvannja_BS будет  конвертироваться к типу ustuvannja_BS            ~~~~~
//~~~  Массив ustuvannja_BS должна, где-то объявить система параметрирования   ~~~~~
//~~~  глобально! после получения ответа 1 - команда начала выполняться        ~~~~~
//~~~  содержимое заносится во внутренний буфер системы межпроцессорного       ~~~~~
//~~~  обмена и возвращается результат для контроля с BM                       ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````

//``````````````````````````````````````````````````````````````````````````````````
//~~~  Для указателя *pYustStateDsc                                         ~~~~~
//~~~ !!ПАМЯТЬ НЕОБХОДИМО РАЗМЕЩАТЬ ПО ВЫРОВНЕННЫМ НА ГРАНИЦУ 32 БИТА СЛОВАМ !!! ~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  YustStateDsc locYustState;                                              ~~~~~
//~~~  int res;                                                                ~~~~~
//~~~  locYustState.size_ustuvannja_BS = sizeof(ustuvannja_BS[]);              ~~~~~
//~~~  locYustState. p_ustuvannja_BS   = &ustuvannja_BS[0]  ;                  ~~~~~
//~~~  res =  ReqChangeSettings(1,&locYustState);                              ~~~~~
//~~~   активировать передачу массива                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//`````````````````````````````````````````````````````````````````````````````````` 
//~~~  res =  ReqChangeSettings(0,&locYustState);                              ~~~~~
//~~~   опрос состояния обработки данных                                       ~~~~~
//~~~   STATE_EXEC  -- Wait                                                    ~~~~~
//~~~   SUCCESS_EXEC -- Ok                                                     ~~~~~
//~~~   возврат ERROR_EXEC - Ошибка при приеме данных                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---
extern char  ReqSendYustBM(long lActivation, void* pYustStateDsc);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция запроса на отправку  юстировочных чисел на  BM            ~~~~~
//~~~                                                                        ~~~~~
//~~~                                                                          ~~~~~
//~~~    Возвращаемое значение                                                 ~~~~~
//~~~    1 - команда начала выполняться                                        ~~~~~
//~~~    2 - системы защит и автоматики находится в состоянии выполнении запроса ~~~
//~~~    3 - команда выполнена успешно                                         ~~~~~
//~~~    4 - возникла  ошибка при старте, передаче,                            ~~~~~
//~~~     или данные недостоверны                                              ~~~~~
 
//``````````````````````````````````````````````````````````````````````````````````
//``````````````````````````````````````````````````````````````````````````````````
//~~~   pYustStateDsc - По данному адресу необходимо помещать указатель
//~~~   на структуру YustStateDsc описывающую ustuvannja_BS[NUMBER_CANALS]     ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   lActivation == 0 - вернуть состояние выполнения запроса массива        ~~~~~
//~~~   lActivation == 1 - активировать передачу ustuvannja_BS[NUMBER_CANALS]  ~~~~~
//~~~   
//``````````````````````````````````````````````````````````````````````````````````
//~~~  p_ustuvannja_BS будет  конвертироваться к типу ustuvannja_BS            ~~~~~
//~~~  Массив ustuvannja_BS должна, где-то объявить система параметрирования   ~~~~~
//~~~  глобально! после получения ответа 1 - команда начала выполняться        ~~~~~
//~~~  содержимое заносится во внутренний буфер системы межпроцессорного       ~~~~~
//~~~  обмена и возвращается результат для контроля с BM                       ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````

//``````````````````````````````````````````````````````````````````````````````````
//~~~  Для указателя *pYustStateDsc                                         ~~~~~
//~~~ !!ПАМЯТЬ НЕОБХОДИМО РАЗМЕЩАТЬ ПО ВЫРОВНЕННЫМ НА ГРАНИЦУ 32 БИТА СЛОВАМ !!! ~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  YustStateDsc locYustState;                                              ~~~~~
//~~~  int res;                                                                ~~~~~
//~~~  locYustState.size_ustuvannja_BS = sizeof(ustuvannja_BS[]);              ~~~~~
//~~~  locYustState. p_ustuvannja_BS   = &ustuvannja_BS[0]  ;                  ~~~~~
//~~~  res =  ReqChangeSettings(1,&locYustState);                              ~~~~~
//~~~   активировать передачу массива                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//`````````````````````````````````````````````````````````````````````````````````` 
//~~~  res =  ReqChangeSettings(0,&locYustState);                              ~~~~~
//~~~   опрос состояния обработки данных                                       ~~~~~
//~~~   STATE_EXEC  -- Wait                                                    ~~~~~
//~~~   SUCCESS_EXEC -- Ok                                                     ~~~~~
//~~~   возврат ERROR_EXEC - Ошибка при приеме данных                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


extern unsigned int PrtTbl[];//
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//``````````````````````````````````````````````````````````````````````````````````
//                 ~~~    HEADER  Ar_protection tbl  REQUEST STATE STRUCTS  ~~~
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
typedef struct PrtTblStateDsc_TagIn
{
long size_PrtTbl ;      //Размер считанного массива 
void *p_PrtTbl ;//Указатель на начало данных

}PrtTblStateDsc;
//~~~   
//``````````````````````````````````````````````````````````````````````````````````
//~~~  p_PrtTbl  будет  конвертироваться к типу PrtTbl                         ~~~~~
//~~~  Массив PrtTbl должна, где-то объявить система                           ~~~~~
//~~~  параметрирования после получения ответа 1 - команда начала выполняться  ~~~~~
//~~~  содержимое заносится во внутренний буфер системы межпроцессорного       ~~~~~
//~~~  обмена и возвращается результат для контроля с BM                       ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---
extern char  ReqGetPrtTblBM(long lActivation, void* pPrtTblStateDsc);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция запроса на получение  юстировочных чисел  с BM            ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~    Возвращаемое значение                                                 ~~~~~
//~~~    1 - команда начала выполняться                                        ~~~~~
//~~~    2 - системы защит и автоматики находится в состоянии выполнении запроса ~~~
//~~~    3 - команда выполнена успешно                                         ~~~~~
//~~~    4 - возникла  ошибка при старте, передаче,                            ~~~~~
//~~~     или данные недостоверны                                              ~~~~~
 
//``````````````````````````````````````````````````````````````````````````````````
//~~~   pPrtTblStateDsc - По данному адресу необходимо помещать указатель
//~~~   на структуру PrtTblStateDsc описывающую PrtTbl[]                      ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   lActivation == 0 - вернуть состояние выполнения запроса массива        ~~~~~
//~~~   lActivation == 1 - активировать передачу PrtTbl[]                      ~~~~~
//~~~   
//``````````````````````````````````````````````````````````````````````````````````
//~~~  p_PrtTbl будет  конвертироваться к типу PrtTbl                          ~~~~~
//~~~  Массив ustuvannja_BS должна, где-то объявить система параметрирования   ~~~~~
//~~~  глобально! после получения ответа 1 - команда начала выполняться        ~~~~~
//~~~  содержимое заносится во внутренний буфер системы межпроцессорного       ~~~~~
//~~~  обмена и возвращается результат для контроля с BM                       ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````

//``````````````````````````````````````````````````````````````````````````````````
//~~~  Для указателя *pPrtTblStateDsc                                         ~~~~~
//~~~ !!ПАМЯТЬ НЕОБХОДИМО РАЗМЕЩАТЬ ПО ВЫРОВНЕННЫМ НА ГРАНИЦУ 32 БИТА СЛОВАМ !!! ~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  PrtTblStateDsc locPrtTblState;                                          ~~~~~
//~~~  int res;                                                                ~~~~~
//~~~  locPrtTblState.size_PrtTbl = sizeof(PrtTbl[]);                          ~~~~~
//~~~  locPrtTblState. p_PrtTbl   = &PrtTbl[0]  ;                              ~~~~~
//~~~  res =  ReqChangeSettings(1,&locPrtTblState);                            ~~~~~
//~~~   активировать передачу массива                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//`````````````````````````````````````````````````````````````````````````````````` 
//~~~  res =  ReqChangeSettings(0,&locPrtTblState);                            ~~~~~
//~~~   опрос состояния обработки данных                                       ~~~~~
//~~~   STATE_EXEC  -- Wait                                                    ~~~~~
//~~~   SUCCESS_EXEC -- Ok                                                     ~~~~~
//~~~   возврат ERROR_EXEC - Ошибка при приеме данных                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---
extern char  ReqSendPrtTblBM(long lActivation, void* pPrtTblStateDsc);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция запроса на отправку  юстировочных чисел на  BM               ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~    Возвращаемое значение                                                 ~~~~~
//~~~    1 - команда начала выполняться                                        ~~~~~
//~~~    2 - системы защит и автоматики находится в состоянии выполнении запроса ~~~
//~~~    3 - команда выполнена успешно                                         ~~~~~
//~~~    4 - возникла  ошибка при старте, передаче,                            ~~~~~
//~~~     или данные недостоверны                                              ~~~~~
 
//``````````````````````````````````````````````````````````````````````````````````
//``````````````````````````````````````````````````````````````````````````````````
//~~~   pPrtTblStateDsc - По данному адресу необходимо помещать указатель
//~~~   на структуру PrtTblStateDsc описывающую PrtTbl[]                       ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   lActivation == 0 - вернуть состояние выполнения запроса массива        ~~~~~
//~~~   lActivation == 1 - активировать передачу PrtTbl[]                      ~~~~~
//~~~   
//``````````````````````````````````````````````````````````````````````````````````
//~~~  p_PrtTbl будет  конвертироваться к типу PrtTbl[]                        ~~~~~
//~~~  Массив  должна, где-то объявить система параметрирования                ~~~~~
//~~~  глобально! после получения ответа 1 - команда начала выполняться        ~~~~~
//~~~  содержимое заносится во внутренний буфер системы межпроцессорного       ~~~~~
//~~~  обмена и возвращается результат для контроля с BM                       ~~~~~
//~~~                                                                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````

//``````````````````````````````````````````````````````````````````````````````````
//~~~  Для указателя *pPrtTblStateDsc                                          ~~~~~
//~~~ !!ПАМЯТЬ НЕОБХОДИМО РАЗМЕЩАТЬ ПО ВЫРОВНЕННЫМ НА ГРАНИЦУ 32 БИТА СЛОВАМ !!! ~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~  PrtTblStateDsc locPrtTblState;                                          ~~~~~
//~~~  int res;                                                                ~~~~~
//~~~  locPrtTblState.size_PrtTbl = sizeof(PrtTbl[]);                          ~~~~~
//~~~  locPrtTblState.p_PrtTbl   = &PrtTbl[0] ;                        ~~~~~
//~~~  res =  ReqChangeSettings(1,&locPrtTblState);                            ~~~~~
//~~~   активировать передачу массива                                          ~~~~~
//~~~                                                                          ~~~~~
//~~~                                                                          ~~~~~
//`````````````````````````````````````````````````````````````````````````````````` 
//~~~  res =  ReqChangeSettings(0,&locPrtTblState);                            ~~~~~
//~~~   опрос состояния обработки данных                                       ~~~~~
//~~~   STATE_EXEC  -- Wait                                                    ~~~~~
//~~~   SUCCESS_EXEC -- Ok                                                     ~~~~~
//~~~   возврат ERROR_EXEC - Ошибка при приеме данных                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~       Перечень констант которые активируют установку мин параметров     ~~~~~
//~~~       производят запись и счит...ие данных CfgTblDsc                    ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//--Бит запроса на чтение к  системе Ici
#define BS_RQ_RD_CFG_TBL_BIT       (1)
//-Бит запроса на запись к  системе Ici
#define BS_RQ_WR_CFG_TBL_BIT       (2)
//--Бит запроса на установку мин параметров CFG_TBL
#define BS_RQ_SET_MIN_CFG_TBL_BIT  (3)


extern  short shbsRQChangeCfgTablesState;

//``````````````````````````````````````````````````````````````````````````````````
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     Информация о версии ПО и дате компиляции                          ~~~~~
//~~~                                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//../ici/
#include "DiagnG.h"
//должна находится в указателях наструктуры
extern TotVerInfo *pTotVerInfoBm;// процессор Сервисный
extern TotVerInfo *pTotVerInfoBr;// процессор Релейный
extern TotVerInfo *pTotVerInfoBs;// процессор Математиматики
//если при обращении считываются 0
//то информация не получена. Возможные причины - нет связи между процессорами.
//Информация потерялась при передаче
//выводить на экран 000.
//Назначение полей



//```   char ArDateStr [16];      //Дата Компиляции
//```   char ArTimeStr [16];      //Время компиляции
//```	char chSizeDateStr;       //Размер строки даты
//```   char chSizeTimeStr;       //Размер строки времени
//```	short sh;
//```	long long llIarVersion;  //Номер версии Iar
//```    NumVerInfo mVerInfo;
//```		char ver;//Основной номер версии
//```		char sub_ver;//номер версии расширяющей функционал программы
//```		              //при этом функционал программы разных подверсий между собой может быть несовместим 
//```		              //С ТУ или Без ТУ
//```		char corr_num;//Номер коррекции Имеется совместимость с подверсией. Но проведено
//```		//исправление выявленных ошибок
//```		long Bield_num;//Номер сборки Отображает  количество компиляций данного проекта


//``````````````````````````````````````````````````````````````````````````````````
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     Информация о cостоянии межпоцессорного обмена                     ~~~~~
//~~~                                          ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//бит записи CfgTbl(Таблицы конфигурации на релейный)
#define WR_PRT_TBL_BIT       (0) 
//бит записи StngIciTbl(Таблицы настроек на математический)
#define WR_STNG_TBL_BIT      (1) 
//Перед началом записи эти биты взводятся в lStateWriting
extern long lStateWriting;

//Если запись завершилась успешно эти биты "сбрасываются"
//Если нет они будут "висеть"

//``````````````````````````````````````````````````````````````````````````````````
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~    Общий метод запроса получения данных                                ~~~~~
//~~~    с системой межпроцессорнонро  обмена Ici                             ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
// Любой пользователь системы Ici для исключения получения неправильных данных
// должен руководствоваться следующей схемой получения данных
// Либо у себя на локальном адресном пространстве либо на глобальнм объявить
// переменные 
// 1) Результат вызова функции
// long lRes = 0;//Результат вызова функции
// 2) Ключ пользователя для  вызова функции,код объекта(данных) конкретизируется
// для конкретной функции
// unsigned short useKey;
// 3)Вызвать функцию получения ключа
// useKey = GetUserKey(id_Obj);
// id_Obj - константа к-я конкретизируется для каждого объекта данных
// Если результат отрицательный значит объект данных перегружен 
// запросами получить данные неудастся (может быть и ошибка  в ПО)
// 4)Если ключ получен сохранить его.
// 
// 5)Необходимо выделить память под буфер куда будет помещен объект
// Локально в стеке или глобально или даже через вызовы new или alloc 
// ..где-объявлен ObjDataDsc
// long arLObjData[sizeof (ObjDataDsc)];
// 
// 
// 6)Вызвать функцию получения данных
// lRes = GetObjData(useKey, arLObjData);
// 7)НАДО анализировать результат
// т.к. если в процессе работы  GetObjData данные изменились 
// или скажем система Ici начала модифицировать объект данных
// и "застряла" т.е. причин много по к-м она просто "запортила"
// объект данных и соответственно сами данные в буфере  arLObjData то 
// будет возвращена ошибка.
// 8)Если SUCCESS_EXEC - УСПЕХ ....Данные в буфере
// 9)Если ERROR_EXEC или STATE_EXEC то - 
// если позволяют ресурсы(время ) рекомендуется повторить
// вызов функции получения данных
// lRes = GetObjData(useKey, arLObjData);
// 10)Если SUCCESS_EXEC - УСПЕХ....Данные в буфере
// 11)Если ERROR_EXEC или STATE_EXEC то 
// рекомендуется вернуть ERROR_EXEC или STATE_EXEC дальше
// Скорее всего система перегружена запросами и надо подождать. 


//``````````````````````````````````````````````````````````````````````````````````
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//``````````````````````````````````````````````````````````````````````````````````
#define NUM_IN  32
//~~~      - 
//``````````````````````````````````````````````````````````````````````````````````
#define NUM_OUT 16
//~~~      - 
//``````````````````````````````````````````````````````````````````````````````````
#define NUM_LED 16
//~~~      - 
//``````````````````````````````````````````````````````````````````````````````````


#define AMOUNT_BYTE_FOR_IN            (((NUM_IN)>>3) ) //+1) 

#define AMOUNT_BYTE_FOR_OUT           (((NUM_OUT)>>3)) // +1) 

#define AMOUNT_BYTE_FOR_OUT_TRG       (((NUM_OUT)>>3)  ) //+1)
                                                        //
#define AMOUNT_BYTE_FOR_LED           (((NUM_LED)>>3) ) //+1)
                                                        //
#define AMOUNT_BYTE_FOR_LED_TRG       (((NUM_LED)>>3) ) //+1)

#define AMOUNT_BYTE_FOR_GRP_SELECTOR   1
typedef struct tag_TeleMechsInfoDsc
{

	char  chArIn    [AMOUNT_BYTE_FOR_IN ];
	char  chArOut   [AMOUNT_BYTE_FOR_OUT];
	char  chArOutTrg[AMOUNT_BYTE_FOR_OUT_TRG];
	char  chArLed   [AMOUNT_BYTE_FOR_LED];
	char  chArLedTrg[AMOUNT_BYTE_FOR_LED_TRG ];
	char  chGrpSelector;

}TeleMechsInfoDsc;	
//Описание работы с данными телемеханики
//Конкретизация общего метода
// Либо у себя на локальном адресном пространстве либо на глобальнм объявить
// переменные 
// 1) Результат вызова функции
// long lRes = 0;//
// Вызвать функцию получения ключа (обявлена long GetUserKeyTeleMechsData(void))
// unsigned short useKey = GetUserKeyTeleMechsData();
// Проанализировать useKey. Если useKey == 0 || useKey > 16
//Нет возможности распределить ресурс - много желающих читать
//Надо подождать пока освободится.
//
// Необходимо выделить память под буфер куда будет помещен объект
// Локально в стеке или глобально или даже через вызовы new или alloc 
// ..где-объявлен ObjDataDsc
// long arLObjData[sizeof (ObjDataDsc)];
// 
// 
// )Вызвать функцию получения данных
// long GetTeleMechsData(long lUsrKey, void *pBuf);

//lRes = GetTeleMechsData(useKey, arLObjData);
//
//НАДО анализировать результат
// т.к. если в процессе работы  GetObjData данные изменились 
// или скажем система Ici начала модифицировать объект данных
// и "застряла" т.е. причин много по к-м она просто "запортила"
// объект данных и соответственно сами данные в буфере  arLObjData то 
// будет возвращена ошибка.
// )Если SUCCESS_EXEC - УСПЕХ ....Данные в буфере
// )Если ERROR_EXEC или STATE_EXEC то - 
// если позволяют ресурсы(время ) рекомендуется повторить
// вызов функции получения данных
// lRes = GetObjData(useKey, arLObjData);
// )Если SUCCESS_EXEC - УСПЕХ....Данные в буфере
// )Если ERROR_EXEC или STATE_EXEC то 
// рекомендуется вернуть ERROR_EXEC или STATE_EXEC дальше
// Скорее всего система перегружена запросами и надо подождать.  
// 
//В случае SUCCESS_EXEC в буфере будут данные TeleMechsInfoDsc
//
//Дальше их можно интерпретировать по этой структуре. 

//////////////////////////////////////////////////////////////////////////////////////////
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---
extern long SetCmdHVPS(void *p_in_param, int nID_Activation);
                                        //unsigned short* p_out_param);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция генерации команд                                             ~~~~~
//~~~     возврат 2 - обслуживается предыдущий запрос                          ~~~~~
//~~~     возврат 3 - команда выполнена успешно                                ~~~~~
//~~~     возврат 4 - возникла  ошибка                                         ~~~~~
//~~~     p_in_param -> 32 bita                                                ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   p_in_param должен указывать на область памяти команд  4  байта         ~~~~~
//~~~    //значения младших бит должны располагаться по мл. адресам памяти     ~~~~~
//~~~       p_in_param+0 -> 0-7;                                               ~~~~~
//~~~   	p_in_param+1 -> 8-15;                                              ~~~~~
//~~~   	p_in_param+2 -> 16 -24;                                            ~~~~~
//~~~   	p_in_param+3 -> 25 - 31;                                           ~~~~~
//~~~   	p_in_param+3 -> 32 - 39;                                           ~~~~~
//~~~   	p_in_param+3 -> 40 - 47;                                           ~~~~~
//~~~   	p_in_param+3 -> 48 - 55;                                           ~~~~~
//~~~   	p_in_param+3 -> 56 - 63;                                           ~~~~~
//~~~                                                       ~~~~~
//~~~    Длительность  всех команд в этом случае равна 10 миллисекунд          ~~~~~
//~~~    Команды будут стоять в таком положении вне зависимости                ~~~~~
//~~~    от работы   системы защит и автоматики                                ~~~~~
//~~~                                                                          ~~~~~
//~~~     Перечень команд и их положение в битовом  массиве                   ~~~~~
//~~~     определено в файле "epr_f.h" enum ENMEpr_F_Key_f или ENMEpr_F_Key_Mnu_f
//~~~     если необходимо отправить команды л-х нет в  enum ENMEpr_F_Key_f
//``````````````````````````````````````````````````````````````````````````````````
//~~~      int nID_Activation - константа определяется в файле  \inc\ici_ef.h   ~~~~
//~~~      можно поставить любое целое число от 1 до 8                         ~~~~~
//~~~      по ней функция SetCmdHVPS определяет есть ли место в очереди команд  ~~~~~
//~~~       если есть то возвращается  3 - команда выполнена успешно           ~~~~~
//~~~      иначе возврат 4 - возникла  ошибка т.е. очредь заполнена             ~~~~~
//~~~      Ниже пример вызова                                                                    ~~~~~
//~~~    long i = SetCmdHVPS((void*)&(eeprom_prt_tbl.uc_ar_key_rank_cfg[0]),1);  ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     Описание работы с данными    самодиагностики                         ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~       Перечень констант самодиагностики находится  в файлах              ~~~~~
//~~~        diagBmEn.h - мат.порцессор diagBrEn.h процессор логики            ~~~~~
//~~~      diagBsEn.h константы сервисного процессора                          ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~      для получения актуальной информации о результатх самодигностики   ~~~~
//~~~      необходимо вызывать функцию GetDiagnfield(void* pDiagn)            ~~~~~
//~~~      extern void GetDiagnfield(void* pDiagn);
//~~~      Предварительно необходимо зарезервировать память под структуру
//~~~     struct
//~~~     {
//~~~     	BmRamPrgEvtDsc hldrPrgEvtBm;//diagBmEn.h
//~~~     	BrRamPrgEvtDsc hldrPrgEvtBr;// diagBrEn.h
//~~~     	BsRamPrgEvtDsc hldrPrgEvtBs;//  diagBsEn.h
//~~~     }RamPrgEvtFld;	
//~~~     После вызова GetDiagnfield по адресу pDiagn будет размещена struct RamPrgEvtFld
//~~~     

//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---     функция получения актуальной информации о результатх самодигностики                               
extern void GetDiagnfield(void* pDiagn);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     Получение данных о ресурсе ВВ                         ~~~~~
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


//////////////////////////////////////////////////////////////////////////////////////////
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---   функция получения данных о ресурсе ВВ
extern long GetHvpBrOnCalcInfo(void* pHvpBrOnCalcInfoData);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция получения данных о ресурсе ВВ                                             ~~~~~
//~~~     возврат 2 - обслуживается предыдущий запрос                          ~~~~~
//~~~     возврат 3 - команда выполнена успешно                                ~~~~~
//~~~     возврат 4 - возникла  ошибка                                         ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~   Предварительно необходимо зарезервировать память под структуру
//~~~  typedef struct HvpBrOnCalcInfo_TAG{
//~~~  
//~~~  	long lResourceCB;   //Resurs Vikluchtelya
//~~~  	long lAmountSetOnCB;//Kol-vo otkl
//~~~  
//~~~  }HvpBrOnCalcInfoDsc;
//~~~  Адрес зарезервированного блока памяти поместить в pHvpBrOnCalcInfoData
//~~~  В случае возврата SUCCESS_EXEC или 3 данные о ресурсе ВВ будут размещены
//~~~  как описано в HvpBrOnCalcInfoDsc

//////////////////////////////////////////////////////////////////////////////////////////
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---   функция получения данных о активных функциях - сервис для SCADA
extern long GetActiveCmds(char* pChActivCmd);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция получения данных о активных функциях
//~~~     возврат 2 - обслуживается предыдущий запрос                          ~~~~~
//~~~     возврат 3 - команда выполнена успешно                                ~~~~~
//~~~     возврат 4 - возникла  ошибка                                         ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~     ПО ICI самостоятельно выполняет буферизацию принимаемых с БР данных
//~~~    Глубина буфера 20 записей.При считывании указатель считывания будет
//~~~   самостоятельно увеличиватся на 1 до глубины буфера 

//////////////////////////////////////////////////////////////////////////////////////////
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//---  функция получения данных о активных функциях - показ работоспособности БР-БС
extern long GetActiveCmdsDemo(char* pChActivCmd);
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//~~~     функция получения данных о активных функциях для демонстрации
//~~~     работоспособности блоков БР - БС
//~~~     возврат 2 - обслуживается предыдущий запрос                          ~~~~~
//~~~     возврат 3 - команда выполнена успешно                                ~~~~~
//~~~     возврат 4 - возникла  ошибка                                         ~~~~~
//``````````````````````````````````````````````````````````````````````````````````
//~~~    Должна появиться информация о активных командах
//~~~    
//~~~    



#endif
